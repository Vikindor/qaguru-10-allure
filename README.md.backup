# CI: Run UI tests with Selenoid and publish Allure to GitHub Pages

Minimal GitHub Actions setup to:
- start **Selenoid** on the runner via Aerokube **CM**,
- run Gradle/JUnit tests (Selenide remote),
- build **Allure** report with history,
- publish it to **GitHub Pages** (branch `gh-pages`).

---

## 1) Gradle (Allure + forward `-D` flags to the test JVM)

**`build.gradle.kts`**
```kotlin
plugins {
    id("java")
    id("io.qameta.allure") version "3.0.0" // allure-framework/allure-gradle
}

allure {
    report {
        version.set("2.35.1") // allure-framework/allure2
    }
    adapter { // responsible for creating the build/allure-results folder
        autoconfigure.set(true)
        autoconfigureListeners.set(true)
        aspectjWeaver.set(true) // processes the @Step annotation
        frameworks {
            junit5 { // framework name
                adapterVersion.set("2.30.0") // same as allure-framework/allure-java
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
    // without this, -Dselenide.* from the workflow won’t reach your JUnit tests
    systemProperties(
        System.getProperties()
            .entries
            .associate { (k, v) -> k.toString() to v }
    )
}
```

---

## 2) GitHub Actions workflow

**`.github/workflows/ci.yml`**
```yaml
name: CI
on: [push, workflow_dispatch]
  
jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing to gh-pages

    steps:
      # 1) Check out the repository into $GITHUB_WORKSPACE so the job can read the files
      - name: Check out repository
        uses: actions/checkout@v5

      # 2) Install JDK and put it on PATH (also sets JAVA_HOME)
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3) Configure Gradle for this job:
      # - restore/save Gradle caches (dependencies, wrapper, etc.)
      # - validate Gradle Wrapper (v4+)
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      # 4) (Optional) Ensure gradlew is executable on Linux after uploading from Windows
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 5) Install CM and start Selenoid via composite action
      - name: Set up Selenoid
        uses: vikindor/selenoid-github-action@v1

      # 6) Run tests against the local Selenoid hub
      - name: Run tests
        run: ./gradlew clean test -Dselenide.remote=http://localhost:4444/wd/hub

      # 7) Ensure gh-pages exists on first deploy (idempotent)
      - name: Ensure gh-pages exists
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if ! git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            git switch --orphan gh-pages
            git reset --hard
            git config user.name  "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git commit --allow-empty -m "init gh-pages"
            git push origin gh-pages
            git switch -
          fi

      # 8) Pull previous Allure history
      - name: Checkout gh-pages history
        if: always()
        continue-on-error: true
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages

      # 9) Build Allure report with history
      - name: Build Allure report
        if: always()
        uses: simple-elf/allure-report-action@v1.13
        with:
          gh_pages: gh-pages
          allure_results: build/allure-results
          allure_report: allure-report
          allure_history: allure-history

      # 10) Publish to GitHub Pages
      - name: Publish to gh-pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_branch: gh-pages
            publish_dir: allure-history

```

---

## Set up gh-pages

After your first successful run, enable Pages deployment:

1. Go to Settings → Pages.
2. Source: `Deploy from a branch`
3. Branch: `gh-pages` / Folder: `/ (root)`
4. Save

The workflow already builds and pushes `allure-history` to `gh-pages`. This step only tells GitHub Pages where to serve it from.

## How to open the report

Once deployment finishes, your report is available at:

```
https://<your-username>.github.io/<your-repo>/
```

Each run updates the history stored in the `gh-pages` branch.

You can deep-link to the HTML entry point:
`https://<your-username>.github.io/<your-repo>/index.html`

Pages may take ~1–2 minutes on first publish. If you don’t see updates, hard-refresh (Ctrl/Cmd+Shift+R).

---

## Notes & tips
- **One-liners in Actions.** Prefer single-line commands (avoid `\` line wraps) to dodge CRLF/whitespace issues.
- **Pages source.** Reports are published to the `gh-pages` branch to keep build artifacts out of `main`.
